// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Niffler.Messaging.Protobuf {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxIaTmlmZmxlci5NZXNzYWdpbmcuUHJvdG9idWYi",
            "jQQKBk5pZmZsZRI1CgR0eXBlGAEgASgOMicuTmlmZmxlci5NZXNzYWdpbmcu",
            "UHJvdG9idWYuTmlmZmxlLlR5cGUSLgoEdGljaxgCIAEoCzIgLk5pZmZsZXIu",
            "TWVzc2FnaW5nLlByb3RvYnVmLlRpY2sSNgoIcG9zaXRpb24YAyABKAsyJC5O",
            "aWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5Qb3NpdGlvbhI4Cglwb3NpdGlv",
            "bnMYBCABKAsyJS5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5Qb3NpdGlv",
            "bnMSNAoHc2VydmljZRgFIAEoCzIjLk5pZmZsZXIuTWVzc2FnaW5nLlByb3Rv",
            "YnVmLlNlcnZpY2USMAoFc3RhdGUYBiABKAsyIS5OaWZmbGVyLk1lc3NhZ2lu",
            "Zy5Qcm90b2J1Zi5TdGF0ZRIwCgV0cmFkZRgHIAEoCzIhLk5pZmZsZXIuTWVz",
            "c2FnaW5nLlByb3RvYnVmLlRyYWRlEjIKBnRyYWRlcxgIIAEoCzIiLk5pZmZs",
            "ZXIuTWVzc2FnaW5nLlByb3RvYnVmLlRyYWRlcyJcCgRUeXBlEggKBFRJQ0sQ",
            "ABIMCghQT1NJVElPThABEg0KCVBPU0lUSU9OUxACEgsKB1NFUlZJQ0UQAxIJ",
            "CgVTVEFURRAEEgkKBVRSQURFEAUSCgoGVFJBREVTEAYivgEKBFRpY2sSDAoE",
            "Y29kZRgBIAEoCRILCgNhc2sYAiABKAESCwoDYmlkGAMgASgBEg4KBmRpZ2l0",
            "cxgEIAEoBRIPCgdwaXBzaXplGAUgASgBEhAKCHRpY2tzaXplGAYgASgBEg4K",
            "BnNwcmVhZBgHIAEoARIRCgl0aW1lc3RhbXAYCCABKAkSOAoJcG9zaXRpb25z",
            "GAkgASgLMiUuTmlmZmxlci5NZXNzYWdpbmcuUHJvdG9idWYuUG9zaXRpb25z",
            "IoADCghQb3NpdGlvbhINCgVsYWJlbBgBIAEoCRIKCgJpZBgCIAEoBRISCgpz",
            "eW1ib2xjb2RlGAMgASgJEkEKCXRyYWRldHlwZRgEIAEoDjIuLk5pZmZsZXIu",
            "TWVzc2FnaW5nLlByb3RvYnVmLlBvc2l0aW9uLlRyYWRlVHlwZRISCgplbnRy",
            "eVByaWNlGAUgASgBEhUKDXN0b3Bsb3NzcHJpY2UYBiABKAESFwoPdGFrZXBy",
            "b2ZpdHByaWNlGAcgASgBEhEKCWVudHJ5dGltZRgIIAEoCRITCgtncm9zc3By",
            "b2ZpdBgJIAEoARJFCgtzdGF0ZWNoYW5nZRgKIAEoDjIwLk5pZmZsZXIuTWVz",
            "c2FnaW5nLlByb3RvYnVmLlBvc2l0aW9uLlN0YXRlQ2hhbmdlIh4KCVRyYWRl",
            "VHlwZRIHCgNCVVkQABIICgRTRUxMEAEiLwoLU3RhdGVDaGFuZ2USCAoETk9O",
            "RRAAEgoKBk9QRU5FRBABEgoKBkNMT1NFRBACIlIKCVBvc2l0aW9ucxINCgVj",
            "b3VudBgBIAEoBRI2Cghwb3NpdGlvbhgCIAMoCzIkLk5pZmZsZXIuTWVzc2Fn",
            "aW5nLlByb3RvYnVmLlBvc2l0aW9uItQBCgVTdGF0ZRISCgpzdHJhdGVneWlk",
            "GAEgASgJEgsKA2tleRgCIAEoCRI+Cgl2YWx1ZXR5cGUYAyABKA4yKy5OaWZm",
            "bGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5TdGF0ZS5WYWx1ZVR5cGUSEwoLc3Ry",
            "aW5ndmFsdWUYBCABKAkSEQoJYm9vbHZhbHVlGAUgASgIEhMKC2RvdWJsZXZh",
            "bHVlGAYgASgBIi0KCVZhbHVlVHlwZRIKCgZTVFJJTkcQABIICgRCT09MEAES",
            "CgoGRE9VQkxFEAIipAEKB1NlcnZpY2USPAoHY29tbWFuZBgBIAEoDjIrLk5p",
            "ZmZsZXIuTWVzc2FnaW5nLlByb3RvYnVmLlNlcnZpY2UuQ29tbWFuZBIPCgdz",
            "dWNjZXNzGAIgASgIIkoKB0NvbW1hbmQSCQoFUkVTRVQQABIKCgZOT1RJRlkQ",
            "ARILCgdTQ0FMRVVQEAISDQoJU0NBTEVET1dOEAMSDAoIU0hVVERPV04QBCLK",
            "AgoFVHJhZGUSPgoJdHJhZGV0eXBlGAEgASgOMisuTmlmZmxlci5NZXNzYWdp",
            "bmcuUHJvdG9idWYuVHJhZGUuVHJhZGVUeXBlEg4KBnN5bWJvbBgCIAEoCRIO",
            "CgZ2b2x1bWUYAyABKAMSEgoKZW50cnlwcmljZRgEIAEoARINCgVsYWJlbBgF",
            "IAEoCRIUCgxzdG9wTG9zc1BpcHMYBiABKAESFgoOdGFrZVByb2ZpdFBpcHMY",
            "ByABKAEijwEKCVRyYWRlVHlwZRIHCgNCVVkQABIICgRTRUxMEAESEQoNQlVZ",
            "TElNSVRPUkRFUhADEhIKDlNFTExMSU1JVE9SREVSEAQSEAoMQlVZU1RPUE9S",
            "REVSEAUSEQoNU0VMTFNUT1BPUkRFUhAGEhIKDk1PRElGWVBPU0lUSU9OEAcS",
            "DwoLTU9ESUZZT1JERVIQCCI6CgZUcmFkZXMSMAoFdHJhZGUYASADKAsyIS5O",
            "aWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5UcmFkZUIdqgIaTmlmZmxlci5N",
            "ZXNzYWdpbmcuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Niffle), global::Niffler.Messaging.Protobuf.Niffle.Parser, new[]{ "Type", "Tick", "Position", "Positions", "Service", "State", "Trade", "Trades" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Niffle.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Tick), global::Niffler.Messaging.Protobuf.Tick.Parser, new[]{ "Code", "Ask", "Bid", "Digits", "Pipsize", "Ticksize", "Spread", "Timestamp", "Positions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Position), global::Niffler.Messaging.Protobuf.Position.Parser, new[]{ "Label", "Id", "Symbolcode", "Tradetype", "EntryPrice", "Stoplossprice", "Takeprofitprice", "Entrytime", "Grossprofit", "Statechange" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Position.Types.TradeType), typeof(global::Niffler.Messaging.Protobuf.Position.Types.StateChange) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Positions), global::Niffler.Messaging.Protobuf.Positions.Parser, new[]{ "Count", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.State), global::Niffler.Messaging.Protobuf.State.Parser, new[]{ "Strategyid", "Key", "Valuetype", "Stringvalue", "Boolvalue", "Doublevalue" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.State.Types.ValueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Service), global::Niffler.Messaging.Protobuf.Service.Parser, new[]{ "Command", "Success" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Service.Types.Command) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Trade), global::Niffler.Messaging.Protobuf.Trade.Parser, new[]{ "Tradetype", "Symbol", "Volume", "Entryprice", "Label", "StopLossPips", "TakeProfitPips" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Trade.Types.TradeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Trades), global::Niffler.Messaging.Protobuf.Trades.Parser, new[]{ "Trade" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Niffle : pb::IMessage<Niffle> {
    private static readonly pb::MessageParser<Niffle> _parser = new pb::MessageParser<Niffle>(() => new Niffle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Niffle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Niffle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Niffle(Niffle other) : this() {
      type_ = other.type_;
      Tick = other.tick_ != null ? other.Tick.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Positions = other.positions_ != null ? other.Positions.Clone() : null;
      Service = other.service_ != null ? other.Service.Clone() : null;
      State = other.state_ != null ? other.State.Clone() : null;
      Trade = other.trade_ != null ? other.Trade.Clone() : null;
      Trades = other.trades_ != null ? other.Trades.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Niffle Clone() {
      return new Niffle(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Niffler.Messaging.Protobuf.Niffle.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Niffle.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 2;
    private global::Niffler.Messaging.Protobuf.Tick tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Tick Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Niffler.Messaging.Protobuf.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 4;
    private global::Niffler.Messaging.Protobuf.Positions positions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Positions Positions {
      get { return positions_; }
      set {
        positions_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 5;
    private global::Niffler.Messaging.Protobuf.Service service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Service Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Niffler.Messaging.Protobuf.State state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "trade" field.</summary>
    public const int TradeFieldNumber = 7;
    private global::Niffler.Messaging.Protobuf.Trade trade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Trade Trade {
      get { return trade_; }
      set {
        trade_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 8;
    private global::Niffler.Messaging.Protobuf.Trades trades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Trades Trades {
      get { return trades_; }
      set {
        trades_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Niffle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Niffle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Tick, other.Tick)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Positions, other.Positions)) return false;
      if (!object.Equals(Service, other.Service)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Trade, other.Trade)) return false;
      if (!object.Equals(Trades, other.Trades)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (tick_ != null) hash ^= Tick.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (positions_ != null) hash ^= Positions.GetHashCode();
      if (service_ != null) hash ^= Service.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (trade_ != null) hash ^= Trade.GetHashCode();
      if (trades_ != null) hash ^= Trades.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (tick_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tick);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (positions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Positions);
      }
      if (service_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Service);
      }
      if (state_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(State);
      }
      if (trade_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Trade);
      }
      if (trades_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Trades);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (tick_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tick);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (positions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Positions);
      }
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (trade_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trade);
      }
      if (trades_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trades);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Niffle other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.tick_ != null) {
        if (tick_ == null) {
          tick_ = new global::Niffler.Messaging.Protobuf.Tick();
        }
        Tick.MergeFrom(other.Tick);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Niffler.Messaging.Protobuf.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.positions_ != null) {
        if (positions_ == null) {
          positions_ = new global::Niffler.Messaging.Protobuf.Positions();
        }
        Positions.MergeFrom(other.Positions);
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Niffler.Messaging.Protobuf.Service();
        }
        Service.MergeFrom(other.Service);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Niffler.Messaging.Protobuf.State();
        }
        State.MergeFrom(other.State);
      }
      if (other.trade_ != null) {
        if (trade_ == null) {
          trade_ = new global::Niffler.Messaging.Protobuf.Trade();
        }
        Trade.MergeFrom(other.Trade);
      }
      if (other.trades_ != null) {
        if (trades_ == null) {
          trades_ = new global::Niffler.Messaging.Protobuf.Trades();
        }
        Trades.MergeFrom(other.Trades);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Niffler.Messaging.Protobuf.Niffle.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (tick_ == null) {
              tick_ = new global::Niffler.Messaging.Protobuf.Tick();
            }
            input.ReadMessage(tick_);
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Niffler.Messaging.Protobuf.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (positions_ == null) {
              positions_ = new global::Niffler.Messaging.Protobuf.Positions();
            }
            input.ReadMessage(positions_);
            break;
          }
          case 42: {
            if (service_ == null) {
              service_ = new global::Niffler.Messaging.Protobuf.Service();
            }
            input.ReadMessage(service_);
            break;
          }
          case 50: {
            if (state_ == null) {
              state_ = new global::Niffler.Messaging.Protobuf.State();
            }
            input.ReadMessage(state_);
            break;
          }
          case 58: {
            if (trade_ == null) {
              trade_ = new global::Niffler.Messaging.Protobuf.Trade();
            }
            input.ReadMessage(trade_);
            break;
          }
          case 66: {
            if (trades_ == null) {
              trades_ = new global::Niffler.Messaging.Protobuf.Trades();
            }
            input.ReadMessage(trades_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Niffle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TICK")] Tick = 0,
        [pbr::OriginalName("POSITION")] Position = 1,
        [pbr::OriginalName("POSITIONS")] Positions = 2,
        [pbr::OriginalName("SERVICE")] Service = 3,
        [pbr::OriginalName("STATE")] State = 4,
        [pbr::OriginalName("TRADE")] Trade = 5,
        [pbr::OriginalName("TRADES")] Trades = 6,
      }

    }
    #endregion

  }

  public sealed partial class Tick : pb::IMessage<Tick> {
    private static readonly pb::MessageParser<Tick> _parser = new pb::MessageParser<Tick>(() => new Tick());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick(Tick other) : this() {
      code_ = other.code_;
      ask_ = other.ask_;
      bid_ = other.bid_;
      digits_ = other.digits_;
      pipsize_ = other.pipsize_;
      ticksize_ = other.ticksize_;
      spread_ = other.spread_;
      timestamp_ = other.timestamp_;
      Positions = other.positions_ != null ? other.Positions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick Clone() {
      return new Tick(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ask" field.</summary>
    public const int AskFieldNumber = 2;
    private double ask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ask {
      get { return ask_; }
      set {
        ask_ = value;
      }
    }

    /// <summary>Field number for the "bid" field.</summary>
    public const int BidFieldNumber = 3;
    private double bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    /// <summary>Field number for the "digits" field.</summary>
    public const int DigitsFieldNumber = 4;
    private int digits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Digits {
      get { return digits_; }
      set {
        digits_ = value;
      }
    }

    /// <summary>Field number for the "pipsize" field.</summary>
    public const int PipsizeFieldNumber = 5;
    private double pipsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pipsize {
      get { return pipsize_; }
      set {
        pipsize_ = value;
      }
    }

    /// <summary>Field number for the "ticksize" field.</summary>
    public const int TicksizeFieldNumber = 6;
    private double ticksize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ticksize {
      get { return ticksize_; }
      set {
        ticksize_ = value;
      }
    }

    /// <summary>Field number for the "spread" field.</summary>
    public const int SpreadFieldNumber = 7;
    private double spread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Spread {
      get { return spread_; }
      set {
        spread_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 8;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 9;
    private global::Niffler.Messaging.Protobuf.Positions positions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Positions Positions {
      get { return positions_; }
      set {
        positions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Ask != other.Ask) return false;
      if (Bid != other.Bid) return false;
      if (Digits != other.Digits) return false;
      if (Pipsize != other.Pipsize) return false;
      if (Ticksize != other.Ticksize) return false;
      if (Spread != other.Spread) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Positions, other.Positions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Ask != 0D) hash ^= Ask.GetHashCode();
      if (Bid != 0D) hash ^= Bid.GetHashCode();
      if (Digits != 0) hash ^= Digits.GetHashCode();
      if (Pipsize != 0D) hash ^= Pipsize.GetHashCode();
      if (Ticksize != 0D) hash ^= Ticksize.GetHashCode();
      if (Spread != 0D) hash ^= Spread.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (positions_ != null) hash ^= Positions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Ask != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Ask);
      }
      if (Bid != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Bid);
      }
      if (Digits != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Digits);
      }
      if (Pipsize != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Pipsize);
      }
      if (Ticksize != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Ticksize);
      }
      if (Spread != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Spread);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Timestamp);
      }
      if (positions_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Positions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Ask != 0D) {
        size += 1 + 8;
      }
      if (Bid != 0D) {
        size += 1 + 8;
      }
      if (Digits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
      }
      if (Pipsize != 0D) {
        size += 1 + 8;
      }
      if (Ticksize != 0D) {
        size += 1 + 8;
      }
      if (Spread != 0D) {
        size += 1 + 8;
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (positions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Positions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tick other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Ask != 0D) {
        Ask = other.Ask;
      }
      if (other.Bid != 0D) {
        Bid = other.Bid;
      }
      if (other.Digits != 0) {
        Digits = other.Digits;
      }
      if (other.Pipsize != 0D) {
        Pipsize = other.Pipsize;
      }
      if (other.Ticksize != 0D) {
        Ticksize = other.Ticksize;
      }
      if (other.Spread != 0D) {
        Spread = other.Spread;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.positions_ != null) {
        if (positions_ == null) {
          positions_ = new global::Niffler.Messaging.Protobuf.Positions();
        }
        Positions.MergeFrom(other.Positions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 17: {
            Ask = input.ReadDouble();
            break;
          }
          case 25: {
            Bid = input.ReadDouble();
            break;
          }
          case 32: {
            Digits = input.ReadInt32();
            break;
          }
          case 41: {
            Pipsize = input.ReadDouble();
            break;
          }
          case 49: {
            Ticksize = input.ReadDouble();
            break;
          }
          case 57: {
            Spread = input.ReadDouble();
            break;
          }
          case 66: {
            Timestamp = input.ReadString();
            break;
          }
          case 74: {
            if (positions_ == null) {
              positions_ = new global::Niffler.Messaging.Protobuf.Positions();
            }
            input.ReadMessage(positions_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      label_ = other.label_;
      id_ = other.id_;
      symbolcode_ = other.symbolcode_;
      tradetype_ = other.tradetype_;
      entryPrice_ = other.entryPrice_;
      stoplossprice_ = other.stoplossprice_;
      takeprofitprice_ = other.takeprofitprice_;
      entrytime_ = other.entrytime_;
      grossprofit_ = other.grossprofit_;
      statechange_ = other.statechange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "symbolcode" field.</summary>
    public const int SymbolcodeFieldNumber = 3;
    private string symbolcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbolcode {
      get { return symbolcode_; }
      set {
        symbolcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradetype" field.</summary>
    public const int TradetypeFieldNumber = 4;
    private global::Niffler.Messaging.Protobuf.Position.Types.TradeType tradetype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position.Types.TradeType Tradetype {
      get { return tradetype_; }
      set {
        tradetype_ = value;
      }
    }

    /// <summary>Field number for the "entryPrice" field.</summary>
    public const int EntryPriceFieldNumber = 5;
    private double entryPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EntryPrice {
      get { return entryPrice_; }
      set {
        entryPrice_ = value;
      }
    }

    /// <summary>Field number for the "stoplossprice" field.</summary>
    public const int StoplosspriceFieldNumber = 6;
    private double stoplossprice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Stoplossprice {
      get { return stoplossprice_; }
      set {
        stoplossprice_ = value;
      }
    }

    /// <summary>Field number for the "takeprofitprice" field.</summary>
    public const int TakeprofitpriceFieldNumber = 7;
    private double takeprofitprice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Takeprofitprice {
      get { return takeprofitprice_; }
      set {
        takeprofitprice_ = value;
      }
    }

    /// <summary>Field number for the "entrytime" field.</summary>
    public const int EntrytimeFieldNumber = 8;
    private string entrytime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entrytime {
      get { return entrytime_; }
      set {
        entrytime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grossprofit" field.</summary>
    public const int GrossprofitFieldNumber = 9;
    private double grossprofit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Grossprofit {
      get { return grossprofit_; }
      set {
        grossprofit_ = value;
      }
    }

    /// <summary>Field number for the "statechange" field.</summary>
    public const int StatechangeFieldNumber = 10;
    private global::Niffler.Messaging.Protobuf.Position.Types.StateChange statechange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position.Types.StateChange Statechange {
      get { return statechange_; }
      set {
        statechange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Id != other.Id) return false;
      if (Symbolcode != other.Symbolcode) return false;
      if (Tradetype != other.Tradetype) return false;
      if (EntryPrice != other.EntryPrice) return false;
      if (Stoplossprice != other.Stoplossprice) return false;
      if (Takeprofitprice != other.Takeprofitprice) return false;
      if (Entrytime != other.Entrytime) return false;
      if (Grossprofit != other.Grossprofit) return false;
      if (Statechange != other.Statechange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Symbolcode.Length != 0) hash ^= Symbolcode.GetHashCode();
      if (Tradetype != 0) hash ^= Tradetype.GetHashCode();
      if (EntryPrice != 0D) hash ^= EntryPrice.GetHashCode();
      if (Stoplossprice != 0D) hash ^= Stoplossprice.GetHashCode();
      if (Takeprofitprice != 0D) hash ^= Takeprofitprice.GetHashCode();
      if (Entrytime.Length != 0) hash ^= Entrytime.GetHashCode();
      if (Grossprofit != 0D) hash ^= Grossprofit.GetHashCode();
      if (Statechange != 0) hash ^= Statechange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Symbolcode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbolcode);
      }
      if (Tradetype != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Tradetype);
      }
      if (EntryPrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EntryPrice);
      }
      if (Stoplossprice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Stoplossprice);
      }
      if (Takeprofitprice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Takeprofitprice);
      }
      if (Entrytime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Entrytime);
      }
      if (Grossprofit != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Grossprofit);
      }
      if (Statechange != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Statechange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Symbolcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbolcode);
      }
      if (Tradetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tradetype);
      }
      if (EntryPrice != 0D) {
        size += 1 + 8;
      }
      if (Stoplossprice != 0D) {
        size += 1 + 8;
      }
      if (Takeprofitprice != 0D) {
        size += 1 + 8;
      }
      if (Entrytime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entrytime);
      }
      if (Grossprofit != 0D) {
        size += 1 + 8;
      }
      if (Statechange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Statechange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Symbolcode.Length != 0) {
        Symbolcode = other.Symbolcode;
      }
      if (other.Tradetype != 0) {
        Tradetype = other.Tradetype;
      }
      if (other.EntryPrice != 0D) {
        EntryPrice = other.EntryPrice;
      }
      if (other.Stoplossprice != 0D) {
        Stoplossprice = other.Stoplossprice;
      }
      if (other.Takeprofitprice != 0D) {
        Takeprofitprice = other.Takeprofitprice;
      }
      if (other.Entrytime.Length != 0) {
        Entrytime = other.Entrytime;
      }
      if (other.Grossprofit != 0D) {
        Grossprofit = other.Grossprofit;
      }
      if (other.Statechange != 0) {
        Statechange = other.Statechange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Symbolcode = input.ReadString();
            break;
          }
          case 32: {
            tradetype_ = (global::Niffler.Messaging.Protobuf.Position.Types.TradeType) input.ReadEnum();
            break;
          }
          case 41: {
            EntryPrice = input.ReadDouble();
            break;
          }
          case 49: {
            Stoplossprice = input.ReadDouble();
            break;
          }
          case 57: {
            Takeprofitprice = input.ReadDouble();
            break;
          }
          case 66: {
            Entrytime = input.ReadString();
            break;
          }
          case 73: {
            Grossprofit = input.ReadDouble();
            break;
          }
          case 80: {
            statechange_ = (global::Niffler.Messaging.Protobuf.Position.Types.StateChange) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Position message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TradeType {
        [pbr::OriginalName("BUY")] Buy = 0,
        [pbr::OriginalName("SELL")] Sell = 1,
      }

      public enum StateChange {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("OPENED")] Opened = 1,
        [pbr::OriginalName("CLOSED")] Closed = 2,
      }

    }
    #endregion

  }

  public sealed partial class Positions : pb::IMessage<Positions> {
    private static readonly pb::MessageParser<Positions> _parser = new pb::MessageParser<Positions>(() => new Positions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Positions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions(Positions other) : this() {
      count_ = other.count_;
      position_ = other.position_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions Clone() {
      return new Positions(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Niffler.Messaging.Protobuf.Position> _repeated_position_codec
        = pb::FieldCodec.ForMessage(18, global::Niffler.Messaging.Protobuf.Position.Parser);
    private readonly pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Position> position_ = new pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Position> Position {
      get { return position_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Positions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Positions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!position_.Equals(other.position_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= position_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      position_.WriteTo(output, _repeated_position_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += position_.CalculateSize(_repeated_position_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Positions other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      position_.Add(other.position_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 18: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class State : pb::IMessage<State> {
    private static readonly pb::MessageParser<State> _parser = new pb::MessageParser<State>(() => new State());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<State> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State(State other) : this() {
      strategyid_ = other.strategyid_;
      key_ = other.key_;
      valuetype_ = other.valuetype_;
      stringvalue_ = other.stringvalue_;
      boolvalue_ = other.boolvalue_;
      doublevalue_ = other.doublevalue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State Clone() {
      return new State(this);
    }

    /// <summary>Field number for the "strategyid" field.</summary>
    public const int StrategyidFieldNumber = 1;
    private string strategyid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Strategyid {
      get { return strategyid_; }
      set {
        strategyid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valuetype" field.</summary>
    public const int ValuetypeFieldNumber = 3;
    private global::Niffler.Messaging.Protobuf.State.Types.ValueType valuetype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.State.Types.ValueType Valuetype {
      get { return valuetype_; }
      set {
        valuetype_ = value;
      }
    }

    /// <summary>Field number for the "stringvalue" field.</summary>
    public const int StringvalueFieldNumber = 4;
    private string stringvalue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stringvalue {
      get { return stringvalue_; }
      set {
        stringvalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boolvalue" field.</summary>
    public const int BoolvalueFieldNumber = 5;
    private bool boolvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Boolvalue {
      get { return boolvalue_; }
      set {
        boolvalue_ = value;
      }
    }

    /// <summary>Field number for the "doublevalue" field.</summary>
    public const int DoublevalueFieldNumber = 6;
    private double doublevalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Doublevalue {
      get { return doublevalue_; }
      set {
        doublevalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as State);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(State other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Strategyid != other.Strategyid) return false;
      if (Key != other.Key) return false;
      if (Valuetype != other.Valuetype) return false;
      if (Stringvalue != other.Stringvalue) return false;
      if (Boolvalue != other.Boolvalue) return false;
      if (Doublevalue != other.Doublevalue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Strategyid.Length != 0) hash ^= Strategyid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Valuetype != 0) hash ^= Valuetype.GetHashCode();
      if (Stringvalue.Length != 0) hash ^= Stringvalue.GetHashCode();
      if (Boolvalue != false) hash ^= Boolvalue.GetHashCode();
      if (Doublevalue != 0D) hash ^= Doublevalue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Strategyid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Strategyid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Valuetype != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Valuetype);
      }
      if (Stringvalue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Stringvalue);
      }
      if (Boolvalue != false) {
        output.WriteRawTag(40);
        output.WriteBool(Boolvalue);
      }
      if (Doublevalue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Doublevalue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Strategyid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strategyid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Valuetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Valuetype);
      }
      if (Stringvalue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stringvalue);
      }
      if (Boolvalue != false) {
        size += 1 + 1;
      }
      if (Doublevalue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(State other) {
      if (other == null) {
        return;
      }
      if (other.Strategyid.Length != 0) {
        Strategyid = other.Strategyid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Valuetype != 0) {
        Valuetype = other.Valuetype;
      }
      if (other.Stringvalue.Length != 0) {
        Stringvalue = other.Stringvalue;
      }
      if (other.Boolvalue != false) {
        Boolvalue = other.Boolvalue;
      }
      if (other.Doublevalue != 0D) {
        Doublevalue = other.Doublevalue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Strategyid = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 24: {
            valuetype_ = (global::Niffler.Messaging.Protobuf.State.Types.ValueType) input.ReadEnum();
            break;
          }
          case 34: {
            Stringvalue = input.ReadString();
            break;
          }
          case 40: {
            Boolvalue = input.ReadBool();
            break;
          }
          case 49: {
            Doublevalue = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the State message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ValueType {
        [pbr::OriginalName("STRING")] String = 0,
        [pbr::OriginalName("BOOL")] Bool = 1,
        [pbr::OriginalName("DOUBLE")] Double = 2,
      }

    }
    #endregion

  }

  public sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      command_ = other.command_;
      success_ = other.success_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Niffler.Messaging.Protobuf.Service.Types.Command command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Service.Types.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Success != other.Success) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::Niffler.Messaging.Protobuf.Service.Types.Command) input.ReadEnum();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Command {
        [pbr::OriginalName("RESET")] Reset = 0,
        [pbr::OriginalName("NOTIFY")] Notify = 1,
        [pbr::OriginalName("SCALEUP")] Scaleup = 2,
        [pbr::OriginalName("SCALEDOWN")] Scaledown = 3,
        [pbr::OriginalName("SHUTDOWN")] Shutdown = 4,
      }

    }
    #endregion

  }

  public sealed partial class Trade : pb::IMessage<Trade> {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade(Trade other) : this() {
      tradetype_ = other.tradetype_;
      symbol_ = other.symbol_;
      volume_ = other.volume_;
      entryprice_ = other.entryprice_;
      label_ = other.label_;
      stopLossPips_ = other.stopLossPips_;
      takeProfitPips_ = other.takeProfitPips_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade Clone() {
      return new Trade(this);
    }

    /// <summary>Field number for the "tradetype" field.</summary>
    public const int TradetypeFieldNumber = 1;
    private global::Niffler.Messaging.Protobuf.Trade.Types.TradeType tradetype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Trade.Types.TradeType Tradetype {
      get { return tradetype_; }
      set {
        tradetype_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 3;
    private long volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "entryprice" field.</summary>
    public const int EntrypriceFieldNumber = 4;
    private double entryprice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Entryprice {
      get { return entryprice_; }
      set {
        entryprice_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stopLossPips" field.</summary>
    public const int StopLossPipsFieldNumber = 6;
    private double stopLossPips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopLossPips {
      get { return stopLossPips_; }
      set {
        stopLossPips_ = value;
      }
    }

    /// <summary>Field number for the "takeProfitPips" field.</summary>
    public const int TakeProfitPipsFieldNumber = 7;
    private double takeProfitPips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TakeProfitPips {
      get { return takeProfitPips_; }
      set {
        takeProfitPips_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tradetype != other.Tradetype) return false;
      if (Symbol != other.Symbol) return false;
      if (Volume != other.Volume) return false;
      if (Entryprice != other.Entryprice) return false;
      if (Label != other.Label) return false;
      if (StopLossPips != other.StopLossPips) return false;
      if (TakeProfitPips != other.TakeProfitPips) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tradetype != 0) hash ^= Tradetype.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Entryprice != 0D) hash ^= Entryprice.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (StopLossPips != 0D) hash ^= StopLossPips.GetHashCode();
      if (TakeProfitPips != 0D) hash ^= TakeProfitPips.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tradetype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Tradetype);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Volume != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Volume);
      }
      if (Entryprice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Entryprice);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Label);
      }
      if (StopLossPips != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(StopLossPips);
      }
      if (TakeProfitPips != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TakeProfitPips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tradetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tradetype);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Entryprice != 0D) {
        size += 1 + 8;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (StopLossPips != 0D) {
        size += 1 + 8;
      }
      if (TakeProfitPips != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.Tradetype != 0) {
        Tradetype = other.Tradetype;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Entryprice != 0D) {
        Entryprice = other.Entryprice;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.StopLossPips != 0D) {
        StopLossPips = other.StopLossPips;
      }
      if (other.TakeProfitPips != 0D) {
        TakeProfitPips = other.TakeProfitPips;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tradetype_ = (global::Niffler.Messaging.Protobuf.Trade.Types.TradeType) input.ReadEnum();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Volume = input.ReadInt64();
            break;
          }
          case 33: {
            Entryprice = input.ReadDouble();
            break;
          }
          case 42: {
            Label = input.ReadString();
            break;
          }
          case 49: {
            StopLossPips = input.ReadDouble();
            break;
          }
          case 57: {
            TakeProfitPips = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Trade message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TradeType {
        [pbr::OriginalName("BUY")] Buy = 0,
        [pbr::OriginalName("SELL")] Sell = 1,
        [pbr::OriginalName("BUYLIMITORDER")] Buylimitorder = 3,
        [pbr::OriginalName("SELLLIMITORDER")] Selllimitorder = 4,
        [pbr::OriginalName("BUYSTOPORDER")] Buystoporder = 5,
        [pbr::OriginalName("SELLSTOPORDER")] Sellstoporder = 6,
        [pbr::OriginalName("MODIFYPOSITION")] Modifyposition = 7,
        [pbr::OriginalName("MODIFYORDER")] Modifyorder = 8,
      }

    }
    #endregion

  }

  public sealed partial class Trades : pb::IMessage<Trades> {
    private static readonly pb::MessageParser<Trades> _parser = new pb::MessageParser<Trades>(() => new Trades());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades(Trades other) : this() {
      trade_ = other.trade_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades Clone() {
      return new Trades(this);
    }

    /// <summary>Field number for the "trade" field.</summary>
    public const int TradeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Niffler.Messaging.Protobuf.Trade> _repeated_trade_codec
        = pb::FieldCodec.ForMessage(10, global::Niffler.Messaging.Protobuf.Trade.Parser);
    private readonly pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Trade> trade_ = new pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Trade>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Trade> Trade {
      get { return trade_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trade_.Equals(other.trade_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trade_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trade_.WriteTo(output, _repeated_trade_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trade_.CalculateSize(_repeated_trade_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trades other) {
      if (other == null) {
        return;
      }
      trade_.Add(other.trade_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            trade_.AddEntriesFrom(input, _repeated_trade_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
