// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Niffler.Messaging.Protobuf {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxIaTmlmZmxlci5NZXNzYWdpbmcuUHJvdG9idWYi",
            "0wUKBk5pZmZsZRISCgpzdHJhdGVneUlkGAEgASgJEhEKCXRpbWVTdGFtcBgC",
            "IAEoAxI1CgR0eXBlGAMgASgOMicuTmlmZmxlci5NZXNzYWdpbmcuUHJvdG9i",
            "dWYuTmlmZmxlLlR5cGUSLgoEdGljaxgEIAEoCzIgLk5pZmZsZXIuTWVzc2Fn",
            "aW5nLlByb3RvYnVmLlRpY2sSNgoIcG9zaXRpb24YBSABKAsyJC5OaWZmbGVy",
            "Lk1lc3NhZ2luZy5Qcm90b2J1Zi5Qb3NpdGlvbhI4Cglwb3NpdGlvbnMYBiAB",
            "KAsyJS5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5Qb3NpdGlvbnMSMAoF",
            "b3JkZXIYByABKAsyIS5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5PcmRl",
            "chIyCgZvcmRlcnMYCCABKAsyIi5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1",
            "Zi5PcmRlcnMSNAoHc2VydmljZRgJIAEoCzIjLk5pZmZsZXIuTWVzc2FnaW5n",
            "LlByb3RvYnVmLlNlcnZpY2USMAoFc3RhdGUYCiABKAsyIS5OaWZmbGVyLk1l",
            "c3NhZ2luZy5Qcm90b2J1Zi5TdGF0ZRIwCgV0cmFkZRgLIAEoCzIhLk5pZmZs",
            "ZXIuTWVzc2FnaW5nLlByb3RvYnVmLlRyYWRlEjIKBnRyYWRlcxgMIAEoCzIi",
            "Lk5pZmZsZXIuTWVzc2FnaW5nLlByb3RvYnVmLlRyYWRlcxIwCgVlcnJvchgN",
            "IAEoCzIhLk5pZmZsZXIuTWVzc2FnaW5nLlByb3RvYnVmLkVycm9yImMKBFR5",
            "cGUSCAoEVElDSxAAEgwKCFBPU0lUSU9OEAESCQoFT1JERVIQAhILCgdTRVJW",
            "SUNFEAMSCQoFU1RBVEUQBBIJCgVUUkFERRAFEgoKBlRSQURFUxAGEgkKBUVS",
            "Uk9SEAciJgoFRXJyb3ISDAoEY29kZRgBIAEoCRIPCgdtZXNzYWdlGAIgASgJ",
            "IpsBCgRUaWNrEgwKBGNvZGUYASABKAkSCwoDYXNrGAIgASgBEgsKA2JpZBgD",
            "IAEoARIOCgZkaWdpdHMYBCABKAUSDwoHcGlwU2l6ZRgFIAEoARIQCgh0aWNr",
            "U2l6ZRgGIAEoARIOCgZzcHJlYWQYByABKAESEQoJdGltZVN0YW1wGAggASgD",
            "EhUKDWlzQmFja1Rlc3RpbmcYCSABKAgi0wMKCFBvc2l0aW9uEg0KBWxhYmVs",
            "GAEgASgJEgoKAmlkGAIgASgFEhIKCnN5bWJvbENvZGUYAyABKAkSQQoJdHJh",
            "ZGVUeXBlGAQgASgOMi4uTmlmZmxlci5NZXNzYWdpbmcuUHJvdG9idWYuUG9z",
            "aXRpb24uVHJhZGVUeXBlEg4KBnZvbHVtZRgFIAEoAxISCgplbnRyeVByaWNl",
            "GAYgASgBEhUKDXN0b3BMb3NzUHJpY2UYByABKAESFwoPdGFrZVByb2ZpdFBy",
            "aWNlGAggASgBEgwKBHBpcHMYCSABKAESEQoJZW50cnlUaW1lGAogASgDEhEK",
            "CWNsb3NlVGltZRgLIAEoAxISCgpjbG9zZVByaWNlGAwgASgBEhMKC2dyb3Nz",
            "UHJvZml0GA0gASgBEkUKC3N0YXRlQ2hhbmdlGA4gASgOMjAuTmlmZmxlci5N",
            "ZXNzYWdpbmcuUHJvdG9idWYuUG9zaXRpb24uU3RhdGVDaGFuZ2UiHgoJVHJh",
            "ZGVUeXBlEgcKA0JVWRAAEggKBFNFTEwQASI9CgtTdGF0ZUNoYW5nZRIICgRO",
            "T05FEAASCgoGT1BFTkVEEAESCgoGQ0xPU0VEEAISDAoITU9ESUZJRUQQAyJS",
            "CglQb3NpdGlvbnMSDQoFQ291bnQYASABKAUSNgoIcG9zaXRpb24YAiADKAsy",
            "JC5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5Qb3NpdGlvbiK8BAoFT3Jk",
            "ZXISDQoFbGFiZWwYASABKAkSCgoCaWQYAiABKAUSEgoKc3ltYm9sQ29kZRgD",
            "IAEoCRI+CglvcmRlclR5cGUYBCABKA4yKy5OaWZmbGVyLk1lc3NhZ2luZy5Q",
            "cm90b2J1Zi5PcmRlci5PcmRlclR5cGUSPgoJdHJhZGVUeXBlGAUgASgOMisu",
            "TmlmZmxlci5NZXNzYWdpbmcuUHJvdG9idWYuT3JkZXIuVHJhZGVUeXBlEg4K",
            "BnZvbHVtZRgGIAEoAxIYChB0YXJnZXRFbnRyeVByaWNlGAcgASgBEhUKDXN0",
            "b3BMb3NzUHJpY2UYCCABKAESFAoMc3RvcExvc3NQaXBzGAkgASgBEhcKD3Rh",
            "a2VQcm9maXRQcmljZRgKIAEoARIWCg50YWtlUHJvZml0UGlwcxgLIAEoARIS",
            "CgpleHBpcnlUaW1lGAwgASgDEhEKCWVudHJ5VGltZRgNIAEoAxJCCgtzdGF0",
            "ZUNoYW5nZRgOIAEoDjItLk5pZmZsZXIuTWVzc2FnaW5nLlByb3RvYnVmLk9y",
            "ZGVyLlN0YXRlQ2hhbmdlIi8KCU9yZGVyVHlwZRIJCgVMSU1JVBAAEggKBFNU",
            "T1AQARINCglTVE9QTElNSVQQAiIeCglUcmFkZVR5cGUSBwoDQlVZEAASCAoE",
            "U0VMTBABIkAKC1N0YXRlQ2hhbmdlEggKBE5PTkUQABIKCgZQTEFDRUQQARIN",
            "CglDQU5DRUxMRUQQAhIMCghNT0RJRklFRBADIkkKBk9yZGVycxINCgVDb3Vu",
            "dBgBIAEoBRIwCgVvcmRlchgCIAMoCzIhLk5pZmZsZXIuTWVzc2FnaW5nLlBy",
            "b3RvYnVmLk9yZGVyIsABCgVTdGF0ZRILCgNrZXkYASABKAkSPgoJdmFsdWVU",
            "eXBlGAIgASgOMisuTmlmZmxlci5NZXNzYWdpbmcuUHJvdG9idWYuU3RhdGUu",
            "VmFsdWVUeXBlEhMKC3N0cmluZ1ZhbHVlGAMgASgJEhEKCWJvb2xWYWx1ZRgE",
            "IAEoCBITCgtkb3VibGVWYWx1ZRgFIAEoASItCglWYWx1ZVR5cGUSCgoGU1RS",
            "SU5HEAASCAoEQk9PTBABEgoKBkRPVUJMRRACIrcBCgdTZXJ2aWNlEjwKB2Nv",
            "bW1hbmQYASABKA4yKy5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5TZXJ2",
            "aWNlLkNvbW1hbmQSDwoHc3VjY2VzcxgCIAEoCBIRCglxdWV1ZU5hbWUYAyAB",
            "KAkiSgoHQ29tbWFuZBIJCgVSRVNFVBAAEgoKBk5PVElGWRABEgsKB1NDQUxF",
            "VVAQAhINCglTQ0FMRURPV04QAxIMCghTSFVURE9XThAEIu0CCgVUcmFkZRJC",
            "Cgt0cmFkZUFjdGlvbhgBIAEoDjItLk5pZmZsZXIuTWVzc2FnaW5nLlByb3Rv",
            "YnVmLlRyYWRlLlRyYWRlQWN0aW9uEjAKBW9yZGVyGAIgASgLMiEuTmlmZmxl",
            "ci5NZXNzYWdpbmcuUHJvdG9idWYuT3JkZXISNgoIcG9zaXRpb24YAyABKAsy",
            "JC5OaWZmbGVyLk1lc3NhZ2luZy5Qcm90b2J1Zi5Qb3NpdGlvbiK1AQoLVHJh",
            "ZGVBY3Rpb24SBwoDQlVZEAASCAoEU0VMTBABEhEKDUJVWUxJTUlUT1JERVIQ",
            "AxISCg5TRUxMTElNSVRPUkRFUhAEEhAKDEJVWVNUT1BPUkRFUhAFEhEKDVNF",
            "TExTVE9QT1JERVIQBhISCg5NT0RJRllQT1NJVElPThAHEg8KC01PRElGWU9S",
            "REVSEAgSEQoNQ0xPU0VQT1NJVElPThAJEg8KC0NBTkNFTE9SREVSEAoiOgoG",
            "VHJhZGVzEjAKBXRyYWRlGAEgAygLMiEuTmlmZmxlci5NZXNzYWdpbmcuUHJv",
            "dG9idWYuVHJhZGVCHaoCGk5pZmZsZXIuTWVzc2FnaW5nLlByb3RvYnVmYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Niffle), global::Niffler.Messaging.Protobuf.Niffle.Parser, new[]{ "StrategyId", "TimeStamp", "Type", "Tick", "Position", "Positions", "Order", "Orders", "Service", "State", "Trade", "Trades", "Error" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Niffle.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Error), global::Niffler.Messaging.Protobuf.Error.Parser, new[]{ "Code", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Tick), global::Niffler.Messaging.Protobuf.Tick.Parser, new[]{ "Code", "Ask", "Bid", "Digits", "PipSize", "TickSize", "Spread", "TimeStamp", "IsBackTesting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Position), global::Niffler.Messaging.Protobuf.Position.Parser, new[]{ "Label", "Id", "SymbolCode", "TradeType", "Volume", "EntryPrice", "StopLossPrice", "TakeProfitPrice", "Pips", "EntryTime", "CloseTime", "ClosePrice", "GrossProfit", "StateChange" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Position.Types.TradeType), typeof(global::Niffler.Messaging.Protobuf.Position.Types.StateChange) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Positions), global::Niffler.Messaging.Protobuf.Positions.Parser, new[]{ "Count", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Order), global::Niffler.Messaging.Protobuf.Order.Parser, new[]{ "Label", "Id", "SymbolCode", "OrderType", "TradeType", "Volume", "TargetEntryPrice", "StopLossPrice", "StopLossPips", "TakeProfitPrice", "TakeProfitPips", "ExpiryTime", "EntryTime", "StateChange" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Order.Types.OrderType), typeof(global::Niffler.Messaging.Protobuf.Order.Types.TradeType), typeof(global::Niffler.Messaging.Protobuf.Order.Types.StateChange) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Orders), global::Niffler.Messaging.Protobuf.Orders.Parser, new[]{ "Count", "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.State), global::Niffler.Messaging.Protobuf.State.Parser, new[]{ "Key", "ValueType", "StringValue", "BoolValue", "DoubleValue" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.State.Types.ValueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Service), global::Niffler.Messaging.Protobuf.Service.Parser, new[]{ "Command", "Success", "QueueName" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Service.Types.Command) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Trade), global::Niffler.Messaging.Protobuf.Trade.Parser, new[]{ "TradeAction", "Order", "Position" }, null, new[]{ typeof(global::Niffler.Messaging.Protobuf.Trade.Types.TradeAction) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niffler.Messaging.Protobuf.Trades), global::Niffler.Messaging.Protobuf.Trades.Parser, new[]{ "Trade" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Niffle : pb::IMessage<Niffle> {
    private static readonly pb::MessageParser<Niffle> _parser = new pb::MessageParser<Niffle>(() => new Niffle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Niffle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Niffle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Niffle(Niffle other) : this() {
      strategyId_ = other.strategyId_;
      timeStamp_ = other.timeStamp_;
      type_ = other.type_;
      Tick = other.tick_ != null ? other.Tick.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Positions = other.positions_ != null ? other.Positions.Clone() : null;
      Order = other.order_ != null ? other.Order.Clone() : null;
      Orders = other.orders_ != null ? other.Orders.Clone() : null;
      Service = other.service_ != null ? other.Service.Clone() : null;
      State = other.state_ != null ? other.State.Clone() : null;
      Trade = other.trade_ != null ? other.Trade.Clone() : null;
      Trades = other.trades_ != null ? other.Trades.Clone() : null;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Niffle Clone() {
      return new Niffle(this);
    }

    /// <summary>Field number for the "strategyId" field.</summary>
    public const int StrategyIdFieldNumber = 1;
    private string strategyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrategyId {
      get { return strategyId_; }
      set {
        strategyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Niffler.Messaging.Protobuf.Niffle.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Niffle.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 4;
    private global::Niffler.Messaging.Protobuf.Tick tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Tick Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Niffler.Messaging.Protobuf.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 6;
    private global::Niffler.Messaging.Protobuf.Positions positions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Positions Positions {
      get { return positions_; }
      set {
        positions_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 7;
    private global::Niffler.Messaging.Protobuf.Order order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 8;
    private global::Niffler.Messaging.Protobuf.Orders orders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Orders Orders {
      get { return orders_; }
      set {
        orders_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 9;
    private global::Niffler.Messaging.Protobuf.Service service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Service Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 10;
    private global::Niffler.Messaging.Protobuf.State state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "trade" field.</summary>
    public const int TradeFieldNumber = 11;
    private global::Niffler.Messaging.Protobuf.Trade trade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Trade Trade {
      get { return trade_; }
      set {
        trade_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 12;
    private global::Niffler.Messaging.Protobuf.Trades trades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Trades Trades {
      get { return trades_; }
      set {
        trades_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 13;
    private global::Niffler.Messaging.Protobuf.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Niffle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Niffle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrategyId != other.StrategyId) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Tick, other.Tick)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Positions, other.Positions)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      if (!object.Equals(Orders, other.Orders)) return false;
      if (!object.Equals(Service, other.Service)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Trade, other.Trade)) return false;
      if (!object.Equals(Trades, other.Trades)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrategyId.Length != 0) hash ^= StrategyId.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (tick_ != null) hash ^= Tick.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (positions_ != null) hash ^= Positions.GetHashCode();
      if (order_ != null) hash ^= Order.GetHashCode();
      if (orders_ != null) hash ^= Orders.GetHashCode();
      if (service_ != null) hash ^= Service.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (trade_ != null) hash ^= Trade.GetHashCode();
      if (trades_ != null) hash ^= Trades.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrategyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StrategyId);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeStamp);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (tick_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Tick);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (positions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Positions);
      }
      if (order_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Order);
      }
      if (orders_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Orders);
      }
      if (service_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Service);
      }
      if (state_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(State);
      }
      if (trade_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Trade);
      }
      if (trades_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Trades);
      }
      if (error_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrategyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrategyId);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (tick_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tick);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (positions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Positions);
      }
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (orders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orders);
      }
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (trade_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trade);
      }
      if (trades_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trades);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Niffle other) {
      if (other == null) {
        return;
      }
      if (other.StrategyId.Length != 0) {
        StrategyId = other.StrategyId;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.tick_ != null) {
        if (tick_ == null) {
          tick_ = new global::Niffler.Messaging.Protobuf.Tick();
        }
        Tick.MergeFrom(other.Tick);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Niffler.Messaging.Protobuf.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.positions_ != null) {
        if (positions_ == null) {
          positions_ = new global::Niffler.Messaging.Protobuf.Positions();
        }
        Positions.MergeFrom(other.Positions);
      }
      if (other.order_ != null) {
        if (order_ == null) {
          order_ = new global::Niffler.Messaging.Protobuf.Order();
        }
        Order.MergeFrom(other.Order);
      }
      if (other.orders_ != null) {
        if (orders_ == null) {
          orders_ = new global::Niffler.Messaging.Protobuf.Orders();
        }
        Orders.MergeFrom(other.Orders);
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Niffler.Messaging.Protobuf.Service();
        }
        Service.MergeFrom(other.Service);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Niffler.Messaging.Protobuf.State();
        }
        State.MergeFrom(other.State);
      }
      if (other.trade_ != null) {
        if (trade_ == null) {
          trade_ = new global::Niffler.Messaging.Protobuf.Trade();
        }
        Trade.MergeFrom(other.Trade);
      }
      if (other.trades_ != null) {
        if (trades_ == null) {
          trades_ = new global::Niffler.Messaging.Protobuf.Trades();
        }
        Trades.MergeFrom(other.Trades);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Niffler.Messaging.Protobuf.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StrategyId = input.ReadString();
            break;
          }
          case 16: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 24: {
            type_ = (global::Niffler.Messaging.Protobuf.Niffle.Types.Type) input.ReadEnum();
            break;
          }
          case 34: {
            if (tick_ == null) {
              tick_ = new global::Niffler.Messaging.Protobuf.Tick();
            }
            input.ReadMessage(tick_);
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Niffler.Messaging.Protobuf.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 50: {
            if (positions_ == null) {
              positions_ = new global::Niffler.Messaging.Protobuf.Positions();
            }
            input.ReadMessage(positions_);
            break;
          }
          case 58: {
            if (order_ == null) {
              order_ = new global::Niffler.Messaging.Protobuf.Order();
            }
            input.ReadMessage(order_);
            break;
          }
          case 66: {
            if (orders_ == null) {
              orders_ = new global::Niffler.Messaging.Protobuf.Orders();
            }
            input.ReadMessage(orders_);
            break;
          }
          case 74: {
            if (service_ == null) {
              service_ = new global::Niffler.Messaging.Protobuf.Service();
            }
            input.ReadMessage(service_);
            break;
          }
          case 82: {
            if (state_ == null) {
              state_ = new global::Niffler.Messaging.Protobuf.State();
            }
            input.ReadMessage(state_);
            break;
          }
          case 90: {
            if (trade_ == null) {
              trade_ = new global::Niffler.Messaging.Protobuf.Trade();
            }
            input.ReadMessage(trade_);
            break;
          }
          case 98: {
            if (trades_ == null) {
              trades_ = new global::Niffler.Messaging.Protobuf.Trades();
            }
            input.ReadMessage(trades_);
            break;
          }
          case 106: {
            if (error_ == null) {
              error_ = new global::Niffler.Messaging.Protobuf.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Niffle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TICK")] Tick = 0,
        [pbr::OriginalName("POSITION")] Position = 1,
        [pbr::OriginalName("ORDER")] Order = 2,
        [pbr::OriginalName("SERVICE")] Service = 3,
        [pbr::OriginalName("STATE")] State = 4,
        [pbr::OriginalName("TRADE")] Trade = 5,
        [pbr::OriginalName("TRADES")] Trades = 6,
        [pbr::OriginalName("ERROR")] Error = 7,
      }

    }
    #endregion

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tick : pb::IMessage<Tick> {
    private static readonly pb::MessageParser<Tick> _parser = new pb::MessageParser<Tick>(() => new Tick());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick(Tick other) : this() {
      code_ = other.code_;
      ask_ = other.ask_;
      bid_ = other.bid_;
      digits_ = other.digits_;
      pipSize_ = other.pipSize_;
      tickSize_ = other.tickSize_;
      spread_ = other.spread_;
      timeStamp_ = other.timeStamp_;
      isBackTesting_ = other.isBackTesting_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick Clone() {
      return new Tick(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ask" field.</summary>
    public const int AskFieldNumber = 2;
    private double ask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ask {
      get { return ask_; }
      set {
        ask_ = value;
      }
    }

    /// <summary>Field number for the "bid" field.</summary>
    public const int BidFieldNumber = 3;
    private double bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    /// <summary>Field number for the "digits" field.</summary>
    public const int DigitsFieldNumber = 4;
    private int digits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Digits {
      get { return digits_; }
      set {
        digits_ = value;
      }
    }

    /// <summary>Field number for the "pipSize" field.</summary>
    public const int PipSizeFieldNumber = 5;
    private double pipSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PipSize {
      get { return pipSize_; }
      set {
        pipSize_ = value;
      }
    }

    /// <summary>Field number for the "tickSize" field.</summary>
    public const int TickSizeFieldNumber = 6;
    private double tickSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TickSize {
      get { return tickSize_; }
      set {
        tickSize_ = value;
      }
    }

    /// <summary>Field number for the "spread" field.</summary>
    public const int SpreadFieldNumber = 7;
    private double spread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Spread {
      get { return spread_; }
      set {
        spread_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 8;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "isBackTesting" field.</summary>
    public const int IsBackTestingFieldNumber = 9;
    private bool isBackTesting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBackTesting {
      get { return isBackTesting_; }
      set {
        isBackTesting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Ask != other.Ask) return false;
      if (Bid != other.Bid) return false;
      if (Digits != other.Digits) return false;
      if (PipSize != other.PipSize) return false;
      if (TickSize != other.TickSize) return false;
      if (Spread != other.Spread) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (IsBackTesting != other.IsBackTesting) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Ask != 0D) hash ^= Ask.GetHashCode();
      if (Bid != 0D) hash ^= Bid.GetHashCode();
      if (Digits != 0) hash ^= Digits.GetHashCode();
      if (PipSize != 0D) hash ^= PipSize.GetHashCode();
      if (TickSize != 0D) hash ^= TickSize.GetHashCode();
      if (Spread != 0D) hash ^= Spread.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (IsBackTesting != false) hash ^= IsBackTesting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Ask != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Ask);
      }
      if (Bid != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Bid);
      }
      if (Digits != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Digits);
      }
      if (PipSize != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PipSize);
      }
      if (TickSize != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TickSize);
      }
      if (Spread != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Spread);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TimeStamp);
      }
      if (IsBackTesting != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsBackTesting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Ask != 0D) {
        size += 1 + 8;
      }
      if (Bid != 0D) {
        size += 1 + 8;
      }
      if (Digits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
      }
      if (PipSize != 0D) {
        size += 1 + 8;
      }
      if (TickSize != 0D) {
        size += 1 + 8;
      }
      if (Spread != 0D) {
        size += 1 + 8;
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (IsBackTesting != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tick other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Ask != 0D) {
        Ask = other.Ask;
      }
      if (other.Bid != 0D) {
        Bid = other.Bid;
      }
      if (other.Digits != 0) {
        Digits = other.Digits;
      }
      if (other.PipSize != 0D) {
        PipSize = other.PipSize;
      }
      if (other.TickSize != 0D) {
        TickSize = other.TickSize;
      }
      if (other.Spread != 0D) {
        Spread = other.Spread;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.IsBackTesting != false) {
        IsBackTesting = other.IsBackTesting;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 17: {
            Ask = input.ReadDouble();
            break;
          }
          case 25: {
            Bid = input.ReadDouble();
            break;
          }
          case 32: {
            Digits = input.ReadInt32();
            break;
          }
          case 41: {
            PipSize = input.ReadDouble();
            break;
          }
          case 49: {
            TickSize = input.ReadDouble();
            break;
          }
          case 57: {
            Spread = input.ReadDouble();
            break;
          }
          case 64: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 72: {
            IsBackTesting = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      label_ = other.label_;
      id_ = other.id_;
      symbolCode_ = other.symbolCode_;
      tradeType_ = other.tradeType_;
      volume_ = other.volume_;
      entryPrice_ = other.entryPrice_;
      stopLossPrice_ = other.stopLossPrice_;
      takeProfitPrice_ = other.takeProfitPrice_;
      pips_ = other.pips_;
      entryTime_ = other.entryTime_;
      closeTime_ = other.closeTime_;
      closePrice_ = other.closePrice_;
      grossProfit_ = other.grossProfit_;
      stateChange_ = other.stateChange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "symbolCode" field.</summary>
    public const int SymbolCodeFieldNumber = 3;
    private string symbolCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolCode {
      get { return symbolCode_; }
      set {
        symbolCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradeType" field.</summary>
    public const int TradeTypeFieldNumber = 4;
    private global::Niffler.Messaging.Protobuf.Position.Types.TradeType tradeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position.Types.TradeType TradeType {
      get { return tradeType_; }
      set {
        tradeType_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 5;
    private long volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "entryPrice" field.</summary>
    public const int EntryPriceFieldNumber = 6;
    private double entryPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EntryPrice {
      get { return entryPrice_; }
      set {
        entryPrice_ = value;
      }
    }

    /// <summary>Field number for the "stopLossPrice" field.</summary>
    public const int StopLossPriceFieldNumber = 7;
    private double stopLossPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopLossPrice {
      get { return stopLossPrice_; }
      set {
        stopLossPrice_ = value;
      }
    }

    /// <summary>Field number for the "takeProfitPrice" field.</summary>
    public const int TakeProfitPriceFieldNumber = 8;
    private double takeProfitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TakeProfitPrice {
      get { return takeProfitPrice_; }
      set {
        takeProfitPrice_ = value;
      }
    }

    /// <summary>Field number for the "pips" field.</summary>
    public const int PipsFieldNumber = 9;
    private double pips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pips {
      get { return pips_; }
      set {
        pips_ = value;
      }
    }

    /// <summary>Field number for the "entryTime" field.</summary>
    public const int EntryTimeFieldNumber = 10;
    private long entryTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntryTime {
      get { return entryTime_; }
      set {
        entryTime_ = value;
      }
    }

    /// <summary>Field number for the "closeTime" field.</summary>
    public const int CloseTimeFieldNumber = 11;
    private long closeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    /// <summary>Field number for the "closePrice" field.</summary>
    public const int ClosePriceFieldNumber = 12;
    private double closePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "grossProfit" field.</summary>
    public const int GrossProfitFieldNumber = 13;
    private double grossProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GrossProfit {
      get { return grossProfit_; }
      set {
        grossProfit_ = value;
      }
    }

    /// <summary>Field number for the "stateChange" field.</summary>
    public const int StateChangeFieldNumber = 14;
    private global::Niffler.Messaging.Protobuf.Position.Types.StateChange stateChange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position.Types.StateChange StateChange {
      get { return stateChange_; }
      set {
        stateChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Id != other.Id) return false;
      if (SymbolCode != other.SymbolCode) return false;
      if (TradeType != other.TradeType) return false;
      if (Volume != other.Volume) return false;
      if (EntryPrice != other.EntryPrice) return false;
      if (StopLossPrice != other.StopLossPrice) return false;
      if (TakeProfitPrice != other.TakeProfitPrice) return false;
      if (Pips != other.Pips) return false;
      if (EntryTime != other.EntryTime) return false;
      if (CloseTime != other.CloseTime) return false;
      if (ClosePrice != other.ClosePrice) return false;
      if (GrossProfit != other.GrossProfit) return false;
      if (StateChange != other.StateChange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SymbolCode.Length != 0) hash ^= SymbolCode.GetHashCode();
      if (TradeType != 0) hash ^= TradeType.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (EntryPrice != 0D) hash ^= EntryPrice.GetHashCode();
      if (StopLossPrice != 0D) hash ^= StopLossPrice.GetHashCode();
      if (TakeProfitPrice != 0D) hash ^= TakeProfitPrice.GetHashCode();
      if (Pips != 0D) hash ^= Pips.GetHashCode();
      if (EntryTime != 0L) hash ^= EntryTime.GetHashCode();
      if (CloseTime != 0L) hash ^= CloseTime.GetHashCode();
      if (ClosePrice != 0D) hash ^= ClosePrice.GetHashCode();
      if (GrossProfit != 0D) hash ^= GrossProfit.GetHashCode();
      if (StateChange != 0) hash ^= StateChange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (SymbolCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolCode);
      }
      if (TradeType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TradeType);
      }
      if (Volume != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Volume);
      }
      if (EntryPrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(EntryPrice);
      }
      if (StopLossPrice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(StopLossPrice);
      }
      if (TakeProfitPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TakeProfitPrice);
      }
      if (Pips != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Pips);
      }
      if (EntryTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(EntryTime);
      }
      if (CloseTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CloseTime);
      }
      if (ClosePrice != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ClosePrice);
      }
      if (GrossProfit != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(GrossProfit);
      }
      if (StateChange != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) StateChange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SymbolCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolCode);
      }
      if (TradeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeType);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (EntryPrice != 0D) {
        size += 1 + 8;
      }
      if (StopLossPrice != 0D) {
        size += 1 + 8;
      }
      if (TakeProfitPrice != 0D) {
        size += 1 + 8;
      }
      if (Pips != 0D) {
        size += 1 + 8;
      }
      if (EntryTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntryTime);
      }
      if (CloseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTime);
      }
      if (ClosePrice != 0D) {
        size += 1 + 8;
      }
      if (GrossProfit != 0D) {
        size += 1 + 8;
      }
      if (StateChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateChange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SymbolCode.Length != 0) {
        SymbolCode = other.SymbolCode;
      }
      if (other.TradeType != 0) {
        TradeType = other.TradeType;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.EntryPrice != 0D) {
        EntryPrice = other.EntryPrice;
      }
      if (other.StopLossPrice != 0D) {
        StopLossPrice = other.StopLossPrice;
      }
      if (other.TakeProfitPrice != 0D) {
        TakeProfitPrice = other.TakeProfitPrice;
      }
      if (other.Pips != 0D) {
        Pips = other.Pips;
      }
      if (other.EntryTime != 0L) {
        EntryTime = other.EntryTime;
      }
      if (other.CloseTime != 0L) {
        CloseTime = other.CloseTime;
      }
      if (other.ClosePrice != 0D) {
        ClosePrice = other.ClosePrice;
      }
      if (other.GrossProfit != 0D) {
        GrossProfit = other.GrossProfit;
      }
      if (other.StateChange != 0) {
        StateChange = other.StateChange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            SymbolCode = input.ReadString();
            break;
          }
          case 32: {
            tradeType_ = (global::Niffler.Messaging.Protobuf.Position.Types.TradeType) input.ReadEnum();
            break;
          }
          case 40: {
            Volume = input.ReadInt64();
            break;
          }
          case 49: {
            EntryPrice = input.ReadDouble();
            break;
          }
          case 57: {
            StopLossPrice = input.ReadDouble();
            break;
          }
          case 65: {
            TakeProfitPrice = input.ReadDouble();
            break;
          }
          case 73: {
            Pips = input.ReadDouble();
            break;
          }
          case 80: {
            EntryTime = input.ReadInt64();
            break;
          }
          case 88: {
            CloseTime = input.ReadInt64();
            break;
          }
          case 97: {
            ClosePrice = input.ReadDouble();
            break;
          }
          case 105: {
            GrossProfit = input.ReadDouble();
            break;
          }
          case 112: {
            stateChange_ = (global::Niffler.Messaging.Protobuf.Position.Types.StateChange) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Position message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TradeType {
        [pbr::OriginalName("BUY")] Buy = 0,
        [pbr::OriginalName("SELL")] Sell = 1,
      }

      public enum StateChange {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("OPENED")] Opened = 1,
        [pbr::OriginalName("CLOSED")] Closed = 2,
        [pbr::OriginalName("MODIFIED")] Modified = 3,
      }

    }
    #endregion

  }

  public sealed partial class Positions : pb::IMessage<Positions> {
    private static readonly pb::MessageParser<Positions> _parser = new pb::MessageParser<Positions>(() => new Positions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Positions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions(Positions other) : this() {
      count_ = other.count_;
      position_ = other.position_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions Clone() {
      return new Positions(this);
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Niffler.Messaging.Protobuf.Position> _repeated_position_codec
        = pb::FieldCodec.ForMessage(18, global::Niffler.Messaging.Protobuf.Position.Parser);
    private readonly pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Position> position_ = new pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Position> Position {
      get { return position_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Positions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Positions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!position_.Equals(other.position_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= position_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      position_.WriteTo(output, _repeated_position_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += position_.CalculateSize(_repeated_position_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Positions other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      position_.Add(other.position_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 18: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Order : pb::IMessage<Order> {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      label_ = other.label_;
      id_ = other.id_;
      symbolCode_ = other.symbolCode_;
      orderType_ = other.orderType_;
      tradeType_ = other.tradeType_;
      volume_ = other.volume_;
      targetEntryPrice_ = other.targetEntryPrice_;
      stopLossPrice_ = other.stopLossPrice_;
      stopLossPips_ = other.stopLossPips_;
      takeProfitPrice_ = other.takeProfitPrice_;
      takeProfitPips_ = other.takeProfitPips_;
      expiryTime_ = other.expiryTime_;
      entryTime_ = other.entryTime_;
      stateChange_ = other.stateChange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "symbolCode" field.</summary>
    public const int SymbolCodeFieldNumber = 3;
    private string symbolCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolCode {
      get { return symbolCode_; }
      set {
        symbolCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 4;
    private global::Niffler.Messaging.Protobuf.Order.Types.OrderType orderType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Order.Types.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "tradeType" field.</summary>
    public const int TradeTypeFieldNumber = 5;
    private global::Niffler.Messaging.Protobuf.Order.Types.TradeType tradeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Order.Types.TradeType TradeType {
      get { return tradeType_; }
      set {
        tradeType_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private long volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "targetEntryPrice" field.</summary>
    public const int TargetEntryPriceFieldNumber = 7;
    private double targetEntryPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetEntryPrice {
      get { return targetEntryPrice_; }
      set {
        targetEntryPrice_ = value;
      }
    }

    /// <summary>Field number for the "stopLossPrice" field.</summary>
    public const int StopLossPriceFieldNumber = 8;
    private double stopLossPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopLossPrice {
      get { return stopLossPrice_; }
      set {
        stopLossPrice_ = value;
      }
    }

    /// <summary>Field number for the "stopLossPips" field.</summary>
    public const int StopLossPipsFieldNumber = 9;
    private double stopLossPips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopLossPips {
      get { return stopLossPips_; }
      set {
        stopLossPips_ = value;
      }
    }

    /// <summary>Field number for the "takeProfitPrice" field.</summary>
    public const int TakeProfitPriceFieldNumber = 10;
    private double takeProfitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TakeProfitPrice {
      get { return takeProfitPrice_; }
      set {
        takeProfitPrice_ = value;
      }
    }

    /// <summary>Field number for the "takeProfitPips" field.</summary>
    public const int TakeProfitPipsFieldNumber = 11;
    private double takeProfitPips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TakeProfitPips {
      get { return takeProfitPips_; }
      set {
        takeProfitPips_ = value;
      }
    }

    /// <summary>Field number for the "expiryTime" field.</summary>
    public const int ExpiryTimeFieldNumber = 12;
    private long expiryTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    /// <summary>Field number for the "entryTime" field.</summary>
    public const int EntryTimeFieldNumber = 13;
    private long entryTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntryTime {
      get { return entryTime_; }
      set {
        entryTime_ = value;
      }
    }

    /// <summary>Field number for the "stateChange" field.</summary>
    public const int StateChangeFieldNumber = 14;
    private global::Niffler.Messaging.Protobuf.Order.Types.StateChange stateChange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Order.Types.StateChange StateChange {
      get { return stateChange_; }
      set {
        stateChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Id != other.Id) return false;
      if (SymbolCode != other.SymbolCode) return false;
      if (OrderType != other.OrderType) return false;
      if (TradeType != other.TradeType) return false;
      if (Volume != other.Volume) return false;
      if (TargetEntryPrice != other.TargetEntryPrice) return false;
      if (StopLossPrice != other.StopLossPrice) return false;
      if (StopLossPips != other.StopLossPips) return false;
      if (TakeProfitPrice != other.TakeProfitPrice) return false;
      if (TakeProfitPips != other.TakeProfitPips) return false;
      if (ExpiryTime != other.ExpiryTime) return false;
      if (EntryTime != other.EntryTime) return false;
      if (StateChange != other.StateChange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SymbolCode.Length != 0) hash ^= SymbolCode.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (TradeType != 0) hash ^= TradeType.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (TargetEntryPrice != 0D) hash ^= TargetEntryPrice.GetHashCode();
      if (StopLossPrice != 0D) hash ^= StopLossPrice.GetHashCode();
      if (StopLossPips != 0D) hash ^= StopLossPips.GetHashCode();
      if (TakeProfitPrice != 0D) hash ^= TakeProfitPrice.GetHashCode();
      if (TakeProfitPips != 0D) hash ^= TakeProfitPips.GetHashCode();
      if (ExpiryTime != 0L) hash ^= ExpiryTime.GetHashCode();
      if (EntryTime != 0L) hash ^= EntryTime.GetHashCode();
      if (StateChange != 0) hash ^= StateChange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (SymbolCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolCode);
      }
      if (OrderType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OrderType);
      }
      if (TradeType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TradeType);
      }
      if (Volume != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Volume);
      }
      if (TargetEntryPrice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TargetEntryPrice);
      }
      if (StopLossPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(StopLossPrice);
      }
      if (StopLossPips != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(StopLossPips);
      }
      if (TakeProfitPrice != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(TakeProfitPrice);
      }
      if (TakeProfitPips != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(TakeProfitPips);
      }
      if (ExpiryTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(ExpiryTime);
      }
      if (EntryTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(EntryTime);
      }
      if (StateChange != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) StateChange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SymbolCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolCode);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (TradeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeType);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (TargetEntryPrice != 0D) {
        size += 1 + 8;
      }
      if (StopLossPrice != 0D) {
        size += 1 + 8;
      }
      if (StopLossPips != 0D) {
        size += 1 + 8;
      }
      if (TakeProfitPrice != 0D) {
        size += 1 + 8;
      }
      if (TakeProfitPips != 0D) {
        size += 1 + 8;
      }
      if (ExpiryTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiryTime);
      }
      if (EntryTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntryTime);
      }
      if (StateChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateChange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SymbolCode.Length != 0) {
        SymbolCode = other.SymbolCode;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.TradeType != 0) {
        TradeType = other.TradeType;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.TargetEntryPrice != 0D) {
        TargetEntryPrice = other.TargetEntryPrice;
      }
      if (other.StopLossPrice != 0D) {
        StopLossPrice = other.StopLossPrice;
      }
      if (other.StopLossPips != 0D) {
        StopLossPips = other.StopLossPips;
      }
      if (other.TakeProfitPrice != 0D) {
        TakeProfitPrice = other.TakeProfitPrice;
      }
      if (other.TakeProfitPips != 0D) {
        TakeProfitPips = other.TakeProfitPips;
      }
      if (other.ExpiryTime != 0L) {
        ExpiryTime = other.ExpiryTime;
      }
      if (other.EntryTime != 0L) {
        EntryTime = other.EntryTime;
      }
      if (other.StateChange != 0) {
        StateChange = other.StateChange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            SymbolCode = input.ReadString();
            break;
          }
          case 32: {
            orderType_ = (global::Niffler.Messaging.Protobuf.Order.Types.OrderType) input.ReadEnum();
            break;
          }
          case 40: {
            tradeType_ = (global::Niffler.Messaging.Protobuf.Order.Types.TradeType) input.ReadEnum();
            break;
          }
          case 48: {
            Volume = input.ReadInt64();
            break;
          }
          case 57: {
            TargetEntryPrice = input.ReadDouble();
            break;
          }
          case 65: {
            StopLossPrice = input.ReadDouble();
            break;
          }
          case 73: {
            StopLossPips = input.ReadDouble();
            break;
          }
          case 81: {
            TakeProfitPrice = input.ReadDouble();
            break;
          }
          case 89: {
            TakeProfitPips = input.ReadDouble();
            break;
          }
          case 96: {
            ExpiryTime = input.ReadInt64();
            break;
          }
          case 104: {
            EntryTime = input.ReadInt64();
            break;
          }
          case 112: {
            stateChange_ = (global::Niffler.Messaging.Protobuf.Order.Types.StateChange) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Order message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OrderType {
        [pbr::OriginalName("LIMIT")] Limit = 0,
        [pbr::OriginalName("STOP")] Stop = 1,
        [pbr::OriginalName("STOPLIMIT")] Stoplimit = 2,
      }

      public enum TradeType {
        [pbr::OriginalName("BUY")] Buy = 0,
        [pbr::OriginalName("SELL")] Sell = 1,
      }

      public enum StateChange {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("PLACED")] Placed = 1,
        [pbr::OriginalName("CANCELLED")] Cancelled = 2,
        [pbr::OriginalName("MODIFIED")] Modified = 3,
      }

    }
    #endregion

  }

  public sealed partial class Orders : pb::IMessage<Orders> {
    private static readonly pb::MessageParser<Orders> _parser = new pb::MessageParser<Orders>(() => new Orders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Orders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orders(Orders other) : this() {
      count_ = other.count_;
      order_ = other.order_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orders Clone() {
      return new Orders(this);
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Niffler.Messaging.Protobuf.Order> _repeated_order_codec
        = pb::FieldCodec.ForMessage(18, global::Niffler.Messaging.Protobuf.Order.Parser);
    private readonly pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Order> order_ = new pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Order>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Order> Order {
      get { return order_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Orders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Orders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!order_.Equals(other.order_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= order_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      order_.WriteTo(output, _repeated_order_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += order_.CalculateSize(_repeated_order_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Orders other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      order_.Add(other.order_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 18: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class State : pb::IMessage<State> {
    private static readonly pb::MessageParser<State> _parser = new pb::MessageParser<State>(() => new State());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<State> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State(State other) : this() {
      key_ = other.key_;
      valueType_ = other.valueType_;
      stringValue_ = other.stringValue_;
      boolValue_ = other.boolValue_;
      doubleValue_ = other.doubleValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State Clone() {
      return new State(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueType" field.</summary>
    public const int ValueTypeFieldNumber = 2;
    private global::Niffler.Messaging.Protobuf.State.Types.ValueType valueType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.State.Types.ValueType ValueType {
      get { return valueType_; }
      set {
        valueType_ = value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 3;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boolValue" field.</summary>
    public const int BoolValueFieldNumber = 4;
    private bool boolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "doubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 5;
    private double doubleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as State);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(State other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (ValueType != other.ValueType) return false;
      if (StringValue != other.StringValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (DoubleValue != other.DoubleValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (ValueType != 0) hash ^= ValueType.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (DoubleValue != 0D) hash ^= DoubleValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (ValueType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ValueType);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (BoolValue != false) {
        output.WriteRawTag(32);
        output.WriteBool(BoolValue);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DoubleValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ValueType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueType);
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (DoubleValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(State other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.ValueType != 0) {
        ValueType = other.ValueType;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      if (other.DoubleValue != 0D) {
        DoubleValue = other.DoubleValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            valueType_ = (global::Niffler.Messaging.Protobuf.State.Types.ValueType) input.ReadEnum();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            BoolValue = input.ReadBool();
            break;
          }
          case 41: {
            DoubleValue = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the State message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ValueType {
        [pbr::OriginalName("STRING")] String = 0,
        [pbr::OriginalName("BOOL")] Bool = 1,
        [pbr::OriginalName("DOUBLE")] Double = 2,
      }

    }
    #endregion

  }

  public sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      command_ = other.command_;
      success_ = other.success_;
      queueName_ = other.queueName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Niffler.Messaging.Protobuf.Service.Types.Command command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Service.Types.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "queueName" field.</summary>
    public const int QueueNameFieldNumber = 3;
    private string queueName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueName {
      get { return queueName_; }
      set {
        queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Success != other.Success) return false;
      if (QueueName != other.QueueName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (QueueName.Length != 0) hash ^= QueueName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (QueueName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueueName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (QueueName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.QueueName.Length != 0) {
        QueueName = other.QueueName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::Niffler.Messaging.Protobuf.Service.Types.Command) input.ReadEnum();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            QueueName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Command {
        [pbr::OriginalName("RESET")] Reset = 0,
        [pbr::OriginalName("NOTIFY")] Notify = 1,
        [pbr::OriginalName("SCALEUP")] Scaleup = 2,
        [pbr::OriginalName("SCALEDOWN")] Scaledown = 3,
        [pbr::OriginalName("SHUTDOWN")] Shutdown = 4,
      }

    }
    #endregion

  }

  public sealed partial class Trade : pb::IMessage<Trade> {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade(Trade other) : this() {
      tradeAction_ = other.tradeAction_;
      Order = other.order_ != null ? other.Order.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade Clone() {
      return new Trade(this);
    }

    /// <summary>Field number for the "tradeAction" field.</summary>
    public const int TradeActionFieldNumber = 1;
    private global::Niffler.Messaging.Protobuf.Trade.Types.TradeAction tradeAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Trade.Types.TradeAction TradeAction {
      get { return tradeAction_; }
      set {
        tradeAction_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private global::Niffler.Messaging.Protobuf.Order order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Niffler.Messaging.Protobuf.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niffler.Messaging.Protobuf.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeAction != other.TradeAction) return false;
      if (!object.Equals(Order, other.Order)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeAction != 0) hash ^= TradeAction.GetHashCode();
      if (order_ != null) hash ^= Order.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeAction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TradeAction);
      }
      if (order_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Order);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeAction);
      }
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.TradeAction != 0) {
        TradeAction = other.TradeAction;
      }
      if (other.order_ != null) {
        if (order_ == null) {
          order_ = new global::Niffler.Messaging.Protobuf.Order();
        }
        Order.MergeFrom(other.Order);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Niffler.Messaging.Protobuf.Position();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tradeAction_ = (global::Niffler.Messaging.Protobuf.Trade.Types.TradeAction) input.ReadEnum();
            break;
          }
          case 18: {
            if (order_ == null) {
              order_ = new global::Niffler.Messaging.Protobuf.Order();
            }
            input.ReadMessage(order_);
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Niffler.Messaging.Protobuf.Position();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Trade message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TradeAction {
        [pbr::OriginalName("BUY")] Buy = 0,
        [pbr::OriginalName("SELL")] Sell = 1,
        [pbr::OriginalName("BUYLIMITORDER")] Buylimitorder = 3,
        [pbr::OriginalName("SELLLIMITORDER")] Selllimitorder = 4,
        [pbr::OriginalName("BUYSTOPORDER")] Buystoporder = 5,
        [pbr::OriginalName("SELLSTOPORDER")] Sellstoporder = 6,
        [pbr::OriginalName("MODIFYPOSITION")] Modifyposition = 7,
        [pbr::OriginalName("MODIFYORDER")] Modifyorder = 8,
        [pbr::OriginalName("CLOSEPOSITION")] Closeposition = 9,
        [pbr::OriginalName("CANCELORDER")] Cancelorder = 10,
      }

    }
    #endregion

  }

  public sealed partial class Trades : pb::IMessage<Trades> {
    private static readonly pb::MessageParser<Trades> _parser = new pb::MessageParser<Trades>(() => new Trades());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niffler.Messaging.Protobuf.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades(Trades other) : this() {
      trade_ = other.trade_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades Clone() {
      return new Trades(this);
    }

    /// <summary>Field number for the "trade" field.</summary>
    public const int TradeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Niffler.Messaging.Protobuf.Trade> _repeated_trade_codec
        = pb::FieldCodec.ForMessage(10, global::Niffler.Messaging.Protobuf.Trade.Parser);
    private readonly pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Trade> trade_ = new pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Trade>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Niffler.Messaging.Protobuf.Trade> Trade {
      get { return trade_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trade_.Equals(other.trade_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trade_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trade_.WriteTo(output, _repeated_trade_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trade_.CalculateSize(_repeated_trade_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trades other) {
      if (other == null) {
        return;
      }
      trade_.Add(other.trade_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            trade_.AddEntriesFrom(input, _repeated_trade_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
